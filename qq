private:
    System::Void btnLogin_Click(System::Object^ sender, System::EventArgs^ e) {
        if (String::IsNullOrEmpty(txtUsername->Text) || 
            String::IsNullOrEmpty(txtPassword->Text) || 
            cmbRole->SelectedItem == nullptr)
        {
            MessageBox::Show("Please fill all fields", "Error", 
                MessageBoxButtons::OK, MessageBoxIcon::Exclamation);
            return;
        }

        try {
            String^ role = cmbRole->SelectedItem->ToString();
            String^ jsonFile = role + ".json";
            
            if (!File::Exists(jsonFile)) {
                MessageBox::Show("Role configuration not found", "Error", 
                    MessageBoxButtons::OK, MessageBoxIcon::Error);
                return;
            }

            dynamic^ credentials = JsonHelper::DeserializeFromFile(jsonFile);
            
            if (txtUsername->Text == credentials["username"]->ToString() && 
                txtPassword->Text == credentials["password"]->ToString())
            {
                // Закрываем текущую форму
                this->Hide();
                
                // Открываем главную форму с передачей уровня доступа
                MainForm^ mainForm = gcnew MainForm(credentials["access_level"]->ToString());
                mainForm->ShowDialog();
                
                // После закрытия главной формы - закрываем приложение
                this->Close();
            }
            else {
                MessageBox::Show("Invalid username or password", "Error", 
                    MessageBoxButtons::OK, MessageBoxIcon::Error);
                txtPassword->Text = "";
                txtUsername->Focus();
            }
        }
        catch (Exception^ ex) {
            MessageBox::Show("Error: " + ex->Message, "Error", 
                MessageBoxButtons::OK, MessageBoxIcon::Error);
        }
    }

    System::Void btnCancel_Click(System::Object^ sender, System::EventArgs^ e) {
        this->Close();
    }
};
