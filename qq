import os
import json
import random
import math
from datetime import datetime, date, timedelta
from PIL import Image, ImageDraw, ImageFont, ImageOps
from io import BytesIO
import telebot
from telebot import types
import threading
import time

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
TOKEN = '-'
bot = telebot.TeleBot(TOKEN)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
USERS_FILE = 'users.json'
IMAGE_SIZE = (1980, 1080)
AVATAR_SIZE = 400  # –†–∞–∑–º–µ—Ä –∫—Ä—É–≥–ª–æ–π –∞–≤–∞—Ç–∞—Ä–∫–∏
BASE_FONT_RATIO = 0.15  # 15% –æ—Ç –≤—ã—Å–æ—Ç—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

# –¢–∏–ø—ã –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–≤
GRADIENT_TYPES = {
    "vertical": "–í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π",
    "horizontal": "–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π",
    "radial": "–ö—Ä—É–≥–æ–≤–æ–π",
    "diagonal": "–î–∏–∞–≥–æ–Ω–∞–ª—å–Ω—ã–π"
}


# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def load_users():
    if not os.path.exists(USERS_FILE):
        return {}
    try:
        with open(USERS_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    except:
        return {}


def save_users(users):
    with open(USERS_FILE, 'w', encoding='utf-8') as f:
        json.dump(users, f, ensure_ascii=False, indent=4)


users = load_users()


# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–≤
def generate_gradient_background(size, num_colors=3):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π —Ç–∏–ø –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞"""
    gradient_type = random.choice(list(GRADIENT_TYPES.keys()))
    colors = [(random.randint(0, 150), random.randint(0, 150), random.randint(0, 150)) for _ in range(num_colors)]

    img = Image.new('RGB', size)
    draw = ImageDraw.Draw(img)
    width, height = size

    if gradient_type == "vertical":
        for i in range(height):
            pos = i / height
            color = get_gradient_color(colors, pos)
            draw.line([(0, i), (width, i)], fill=color)

    elif gradient_type == "horizontal":
        for i in range(width):
            pos = i / width
            color = get_gradient_color(colors, pos)
            draw.line([(i, 0), (i, height)], fill=color)

    elif gradient_type == "radial":
        center_x, center_y = width // 2, height // 2
        max_radius = int(math.sqrt(center_x ** 2 + center_y ** 2))

        for radius in range(max_radius, 0, -1):
            pos = 1 - radius / max_radius
            color = get_gradient_color(colors, pos)
            draw.ellipse([
                (center_x - radius, center_y - radius),
                (center_x + radius, center_y + radius)
            ], fill=color)

    elif gradient_type == "diagonal":
        max_diag = int(math.sqrt(width ** 2 + height ** 2))
        for i in range(max_diag):
            pos = i / max_diag
            color = get_gradient_color(colors, pos)
            draw.line(diagonal_coords(i, width, height), fill=color, width=2)

    return img, colors, GRADIENT_TYPES[gradient_type]


def get_gradient_color(colors, pos):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ü–≤–µ—Ç –∏–∑ –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞ –ø–æ –ø–æ–∑–∏—Ü–∏–∏"""
    color_idx = pos * (len(colors) - 1)
    idx1 = int(math.floor(color_idx))
    idx2 = min(idx1 + 1, len(colors) - 1)
    factor = color_idx - idx1

    r = int(colors[idx1][0] + (colors[idx2][0] - colors[idx1][0]) * factor)
    g = int(colors[idx1][1] + (colors[idx2][1] - colors[idx1][1]) * factor)
    b = int(colors[idx1][2] + (colors[idx2][2] - colors[idx1][2]) * factor)

    return (r, g, b)


def diagonal_coords(i, width, height):
    """–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –¥–∏–∞–≥–æ–Ω–∞–ª—å–Ω–æ–≥–æ –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞"""
    if i < height:
        return (0, height - i), (i, height)
    else:
        return (i - height, 0), (width, i - height + (height - (i - height)))


# –°–æ–∑–¥–∞–Ω–∏–µ –∫—Ä—É–≥–ª–æ–π –∞–≤–∞—Ç–∞—Ä–∫–∏
def make_circular_avatar(image_path):
    img = Image.open(image_path).resize((AVATAR_SIZE, AVATAR_SIZE))
    mask = Image.new('L', (AVATAR_SIZE, AVATAR_SIZE), 0)
    ImageDraw.Draw(mask).ellipse((0, 0, AVATAR_SIZE, AVATAR_SIZE), fill=255)
    output = ImageOps.fit(img, mask.size, centering=(0.5, 0.5))
    output.putalpha(mask)
    return output


# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
def generate_profile_image(user):
    # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Ñ–æ–Ω
    img, colors, gradient_type = generate_gradient_background(IMAGE_SIZE)
    draw = ImageDraw.Draw(img)

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —à—Ä–∏—Ñ—Ç—ã (15% –æ—Ç –≤—ã—Å–æ—Ç—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è)
    base_font_size = int(IMAGE_SIZE[1] * BASE_FONT_RATIO)
    try:
        font_large = ImageFont.truetype("arial.ttf", int(base_font_size * 0.7))
        font_medium = ImageFont.truetype("arial.ttf", int(base_font_size * 0.5))
        font_small = ImageFont.truetype("arial.ttf", int(base_font_size * 0.3))
    except:
        font_large = ImageFont.load_default(size=int(base_font_size * 0.7))
        font_medium = ImageFont.load_default(size=int(base_font_size * 0.5))
        font_small = ImageFont.load_default(size=int(base_font_size * 0.3))

    # –î–æ–±–∞–≤–ª—è–µ–º –∞–≤–∞—Ç–∞—Ä (–ø–æ —Ü–µ–Ω—Ç—Ä—É —Å–≤–µ—Ä—Ö—É)
    if user['avatar'] and os.path.exists(user['avatar']):
        avatar = make_circular_avatar(user['avatar'])
        img.paste(avatar, ((IMAGE_SIZE[0] - AVATAR_SIZE) // 2, int(IMAGE_SIZE[1] * 0.05)), avatar)

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
    def draw_centered_text(y, text, font, fill=(255, 255, 255)):
        bbox = draw.textbbox((0, 0), text, font=font)
        w, h = bbox[2] - bbox[0], bbox[3] - bbox[1]
        draw.text(((IMAGE_SIZE[0] - w) // 2, y), text, font=font, fill=fill)
        return y + h

    # –†–∏—Å—É–µ–º —Ç–µ–∫—Å—Ç
    y_pos = int(IMAGE_SIZE[1] * 0.05) + AVATAR_SIZE + int(IMAGE_SIZE[1] * 0.05)

    username = f"@{user['username']}" if user['username'] else "–ë–µ–∑ —é–∑–µ—Ä–Ω–µ–π–º–∞"
    y_pos = draw_centered_text(y_pos, username, font_large) + int(IMAGE_SIZE[1] * 0.03)
    y_pos = draw_centered_text(y_pos, user['fio'], font_medium) + int(IMAGE_SIZE[1] * 0.02)

    # –í–æ–∑—Ä–∞—Å—Ç –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–∂–∏—Ç—ã—Ö –¥–Ω–µ–π
    birthday = datetime.strptime(user['birthday'], "%d.%m.%Y").date()
    today = date.today()
    lived_days = (today - birthday).days
    age_text = f"–í–æ–∑—Ä–∞—Å—Ç: {user['age']} –ª–µ—Ç | {lived_days} –¥–Ω–µ–π"
    y_pos = draw_centered_text(y_pos, age_text, font_medium) + int(IMAGE_SIZE[1] * 0.02)

    # –î–Ω–∏ –¥–æ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è
    days_left = days_until_birthday(birthday)
    days_text = "üéâ –° –î–ù–ï–ú –†–û–ñ–î–ï–ù–ò–Ø! üéâ" if days_left == 0 else f"–î–æ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è: {days_left} –¥–Ω–µ–π"
    y_pos = draw_centered_text(y_pos, days_text, font_medium)

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–ª–∏—Ç—Ä—É —Ü–≤–µ—Ç–æ–≤
    palette = " | ".join([f"#{r:02x}{g:02x}{b:02x}" for r, g, b in colors])
    draw_centered_text(IMAGE_SIZE[1] - int(base_font_size * 0.4), f"–¢–∏–ø –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞: {gradient_type} | –¶–≤–µ—Ç–∞ —Ñ–æ–Ω–∞: {palette}", font_small)
    return img


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def calculate_age(birthday):
    today = date.today()
    return today.year - birthday.year - ((today.month, today.day) < (birthday.month, birthday.day))


def days_until_birthday(birthday):
    today = date.today()
    next_bday = date(today.year, birthday.month, birthday.day)
    if next_bday < today:
        next_bday = date(today.year + 1, birthday.month, birthday.day)
    return (next_bday - today).days


# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è
def generate_and_send_profile(chat_id, user_id):
    if user_id not in users:
        return

    user = users[user_id]
    try:
        img = generate_profile_image(user)
        with BytesIO() as output:
            img.save(output, format="JPEG")
            output.seek(0)
            bot.send_photo(chat_id, output)
    except Exception as e:
        bot.send_message(chat_id, f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è: {e}")


# –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
@bot.message_handler(commands=['start'])
def start(message):
    user_id = str(message.from_user.id)

    # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)

    if user_id in users:
        buttons = [
            types.KeyboardButton("üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"),
            types.KeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"),
            types.KeyboardButton("üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"),
            types.KeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å"),
            types.KeyboardButton("üìã –ü–æ–º–æ—â—å")
        ]
    else:
        buttons = [
            types.KeyboardButton("üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"),
            types.KeyboardButton("üìã –ü–æ–º–æ—â—å")
        ]

    markup.add(*buttons)

    # –î–æ–±–∞–≤–ª—è–µ–º –º–µ–Ω—é –∫–æ–º–∞–Ω–¥
    bot.set_my_commands([
        types.BotCommand("/start", "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
        types.BotCommand("/profile", "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"),
        types.BotCommand("/edit", "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å"),
        types.BotCommand("/help", "–ü–æ–º–æ—â—å")
    ])

    bot.send_message(message.chat.id,
                     "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                     reply_markup=markup)

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
@bot.message_handler(func=lambda message: message.text in ["üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"])
def registration_start(message):
    user_id = str(message.from_user.id)
    if user_id in users:
        bot.send_message(message.chat.id, "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
        return

    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:", reply_markup=types.ReplyKeyboardRemove())
    bot.register_next_step_handler(msg, process_fio_step)


def process_fio_step(message):
    user_id = str(message.from_user.id)
    users[user_id] = {
        'username': message.from_user.username or "",
        'fio': message.text,
        'avatar': None,
        'birthday': None,
        'notifications': False,
        'agreed': False
    }

    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (–î–î.–ú–ú.–ì–ì–ì–ì):")
    bot.register_next_step_handler(msg, process_birthday_step)


def process_birthday_step(message):
    user_id = str(message.from_user.id)
    try:
        birthday = datetime.strptime(message.text, "%d.%m.%Y").date()
        users[user_id]['birthday'] = message.text
        users[user_id]['age'] = calculate_age(birthday)

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("–î–∞", "–ù–µ—Ç")
        msg = bot.send_message(message.chat.id, "–ü–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –î–Ω–µ —Ä–æ–∂–¥–µ–Ω–∏—è?", reply_markup=markup)
        bot.register_next_step_handler(msg, process_notification_step)
    except ValueError:
        msg = bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")
        bot.register_next_step_handler(msg, process_birthday_step)


def process_notification_step(message):
    user_id = str(message.from_user.id)
    users[user_id]['notifications'] = message.text.lower() == '–¥–∞'

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–°–æ–≥–ª–∞—Å–µ–Ω", "–ù–µ —Å–æ–≥–ª–∞—Å–µ–Ω")
    msg = bot.send_message(message.chat.id, "–°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö:", reply_markup=markup)
    bot.register_next_step_handler(msg, process_agreement_step)


def process_agreement_step(message):
    user_id = str(message.from_user.id)
    users[user_id]['agreed'] = message.text.lower() == '—Å–æ–≥–ª–∞—Å–µ–Ω'

    msg = bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ —Ñ–æ—Ç–æ –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞:")
    bot.register_next_step_handler(msg, process_avatar_step)


def process_avatar_step(message):
    user_id = str(message.from_user.id)
    try:
        if message.content_type == 'photo':
            file_id = message.photo[-1].file_id
            file_info = bot.get_file(file_id)
            downloaded_file = bot.download_file(file_info.file_path)

            os.makedirs("avatars", exist_ok=True)
            avatar_path = f"avatars/{user_id}.jpg"
            with open(avatar_path, 'wb') as new_file:
                new_file.write(downloaded_file)

            users[user_id]['avatar'] = avatar_path
            save_users(users)

            bot.send_message(message.chat.id, "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
            start(message)
        else:
            msg = bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ.")
            bot.register_next_step_handler(msg, process_avatar_step)
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: {str(e)}")
        start(message)


# –ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—Ñ–∏–ª—è
@bot.message_handler(commands=['profile'])
@bot.message_handler(func=lambda message: message.text in ["üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"])
def show_profile(message):
    user_id = str(message.from_user.id)
    if user_id not in users:
        bot.send_message(message.chat.id, "–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å.")
        return

    generate_and_send_profile(message.chat.id, user_id)@bot.message_handler(commands=['edit'])
@bot.message_handler(func=lambda message: message.text in ["‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å"])
def edit_profile(message):
    user_id = str(message.from_user.id)
    if user_id not in users:
        bot.send_message(message.chat.id, "–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å.")
        return

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    markup.add(
        "–ò–∑–º–µ–Ω–∏—Ç—å –§–ò–û",
        "–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è",
        "–ò–∑–º–µ–Ω–∏—Ç—å –∞–≤–∞—Ç–∞—Ä",
        "–ù–∞–∑–∞–¥"
    )
    bot.send_message(message.chat.id, "–ß—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º?", reply_markup=markup)


@bot.message_handler(func=lambda message: message.text == "–ò–∑–º–µ–Ω–∏—Ç—å –§–ò–û")
def change_fio(message):
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –§–ò–û:", reply_markup=types.ReplyKeyboardRemove())
    bot.register_next_step_handler(msg, process_new_fio)


def process_new_fio(message):
    user_id = str(message.from_user.id)
    users[user_id]['fio'] = message.text
    save_users(users)
    bot.send_message(message.chat.id, "–§–ò–û —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ!")
    generate_and_send_profile(message.chat.id, user_id)


@bot.message_handler(func=lambda message: message.text == "–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è")
def change_birthday(message):
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:",
                           reply_markup=types.ReplyKeyboardRemove())
    bot.register_next_step_handler(msg, process_new_birthday)


def process_new_birthday(message):
    user_id = str(message.from_user.id)
    try:
        birthday = datetime.strptime(message.text, "%d.%m.%Y").date()
        users[user_id]['birthday'] = message.text
        users[user_id]['age'] = calculate_age(birthday)
        save_users(users)
        bot.send_message(message.chat.id, "–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞!")
        generate_and_send_profile(message.chat.id, user_id)
    except ValueError:
        bot.send_message(message.chat.id, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")


@bot.message_handler(func=lambda message: message.text == "–ò–∑–º–µ–Ω–∏—Ç—å –∞–≤–∞—Ç–∞—Ä")
def change_avatar(message):
    msg = bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é –∞–≤–∞—Ç–∞—Ä–∫—É (—Ñ–æ—Ç–æ.jpg):", reply_markup=types.ReplyKeyboardRemove())
    bot.register_next_step_handler(msg, process_new_avatar)


def process_new_avatar(message):
    user_id = str(message.from_user.id)
    try:
        if message.content_type == 'photo':
            file_id = message.photo[-1].file_id
            file_info = bot.get_file(file_id)
            downloaded_file = bot.download_file(file_info.file_path)

            avatar_path = f"avatars/{user_id}.jpg"
            with open(avatar_path, 'wb') as new_file:
                new_file.write(downloaded_file)

            users[user_id]['avatar'] = avatar_path
            save_users(users)
            bot.send_message(message.chat.id, "–ê–≤–∞—Ç–∞—Ä —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!")
            generate_and_send_profile(message.chat.id, user_id)
        else:
            bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ.")
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: {e}")


# –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
@bot.message_handler(func=lambda message: message.text in ["‚ùå –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", "–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å"])
def delete_profile(message):
    user_id = str(message.from_user.id)
    if user_id not in users:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–æ—Ñ–∏–ª—è.")
        return

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–î–∞, —É–¥–∞–ª–∏—Ç—å", "–ù–µ—Ç, –æ—Ç–º–µ–Ω–∞")
    bot.send_message(message.chat.id, "–í—ã —É–≤–µ—Ä–µ–Ω—ã? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!", reply_markup=markup)
    bot.register_next_step_handler(message, confirm_delete)


def confirm_delete(message):
    if message.text == "–î–∞, —É–¥–∞–ª–∏—Ç—å":
        user_id = str(message.from_user.id)
        if users[user_id]['avatar'] and os.path.exists(users[user_id]['avatar']):
            try:
                os.remove(users[user_id]['avatar'])
            except:
                pass

        del users[user_id]
        save_users(users)
        bot.send_message(message.chat.id, "–ü—Ä–æ—Ñ–∏–ª—å —É–¥–∞–ª–µ–Ω.", reply_markup=types.ReplyKeyboardRemove())
    start(message)


# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
@bot.message_handler(func=lambda message: message.text in ["üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"])
def notification_settings(message):
    user_id = str(message.from_user.id)
    if user_id not in users:
        bot.send_message(message.chat.id, "–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å.")
        return

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    if users[user_id]['notifications']:
        markup.add("–û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", "–ù–∞–∑–∞–¥")
    else:
        markup.add("–í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", "–ù–∞–∑–∞–¥")

    status = "–≤–∫–ª—é—á–µ–Ω—ã" if users[user_id]['notifications'] else "–æ—Ç–∫–ª—é—á–µ–Ω—ã"
    bot.send_message(message.chat.id, f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {status}", reply_markup=markup)


@bot.message_handler(func=lambda message: message.text in ["–í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", "–û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"])
def toggle_notifications(message):
    user_id = str(message.from_user.id)
    users[user_id]['notifications'] = not users[user_id]['notifications']
    save_users(users)

    status = "–≤–∫–ª—é—á–µ–Ω—ã" if users[user_id]['notifications'] else "–æ—Ç–∫–ª—é—á–µ–Ω—ã"
    bot.send_message(message.chat.id, f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ç–µ–ø–µ—Ä—å {status}!")
    start(message)

# –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
@bot.message_handler(commands=['help'])
@bot.message_handler(func=lambda message: message.text in ["üìã –ü–æ–º–æ—â—å", "–ü–æ–º–æ—â—å"])
def show_help(message):
    help_text = """
<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/profile - –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å
/edit - –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
/donate - –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
/help - –ü–æ–º–æ—â—å

<b>–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>
- –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è —Å –∫—Ä–∞—Å–∏–≤—ã–º –¥–∏–∑–∞–π–Ω–æ–º
- –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –¥–Ω–µ–π –¥–æ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è
- –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
- –†–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–≤ –¥–ª—è —Ñ–æ–Ω–∞
"""
    bot.send_message(message.chat.id, help_text, parse_mode='HTML')

# –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
def daily_notifications():
    while True:
        now = datetime.now()
        if now.hour == 0 and now.minute < 1:  # –ü–µ—Ä–≤–∞—è –º–∏–Ω—É—Ç–∞ –ø–æ—Å–ª–µ –ø–æ–ª—É–Ω–æ—á–∏
            today = date.today()
            for user_id, user in users.items():
                if user.get('notifications', False) and user.get('agreed', False):
                    try:
                        birthday = datetime.strptime(user['birthday'], "%d.%m.%Y").date()
                        days = days_until_birthday(birthday)

                        if days == 0:
                            msg = f"üéâ {user['fio']}, —Å –î–Ω–µ–º –†–æ–∂–¥–µ–Ω–∏—è! üéâ"
                        else:
                            msg = f"{user['fio']}, –¥–æ –≤–∞—à–µ–≥–æ –î–† –æ—Å—Ç–∞–ª–æ—Å—å {days} –¥–Ω–µ–π"

                        bot.send_message(int(user_id), msg)
                        generate_and_send_profile(int(user_id), user_id)
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è {user_id}: {e}")
            time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑ –≤ –º–∏–Ω—É—Ç—É
        else:
            time.sleep(30)


if __name__ == '__main__':
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    os.makedirs("avatars", exist_ok=True)

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–µ–Ω—é –∫–æ–º–∞–Ω–¥
    bot.set_my_commands([
        types.BotCommand("start", "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
        types.BotCommand("profile", "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"),
        types.BotCommand("edit", "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å"),
        types.BotCommand("help", "–ü–æ–º–æ—â—å")
    ])

    # –ó–∞–ø—É—Å–∫–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    threading.Thread(target=daily_notifications, daemon=True).start()

    try:
        bot.infinity_polling()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
