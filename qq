import os
import json
import random
import math
from datetime import datetime, date, timedelta
from PIL import Image, ImageDraw, ImageFont, ImageOps
from io import BytesIO
import telebot
from telebot import types
import threading
import time

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
TOKEN = '–í–ê–®_–¢–û–ö–ï–ù'
bot = telebot.TeleBot(TOKEN)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
USERS_FILE = 'users.json'
IMAGE_SIZE = (1980, 1080)
AVATAR_SIZE = 400
BASE_FONT_RATIO = 0.15

# –¢–∏–ø—ã –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–≤
GRADIENT_TYPES = {
    "vertical": "–í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π",
    "horizontal": "–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π",
    "radial": "–ö—Ä—É–≥–æ–≤–æ–π",
    "diagonal": "–î–∏–∞–≥–æ–Ω–∞–ª—å–Ω—ã–π"
}

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def load_users():
    if not os.path.exists(USERS_FILE):
        return {}
    try:
        with open(USERS_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    except:
        return {}

def save_users(users):
    with open(USERS_FILE, 'w', encoding='utf-8') as f:
        json.dump(users, f, ensure_ascii=False, indent=4)

users = load_users()

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–≤ (–æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
# ... [–∫–æ–¥ —Ñ—É–Ω–∫—Ü–∏–π generate_gradient_background, get_gradient_color, diagonal_coords]

# –°–æ–∑–¥–∞–Ω–∏–µ –∫—Ä—É–≥–ª–æ–π –∞–≤–∞—Ç–∞—Ä–∫–∏ (–æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
# ... [–∫–æ–¥ —Ñ—É–Ω–∫—Ü–∏–∏ make_circular_avatar]

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è (–æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
# ... [–∫–æ–¥ —Ñ—É–Ω–∫—Ü–∏–∏ generate_profile_image]

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (–æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
# ... [–∫–æ–¥ —Ñ—É–Ω–∫—Ü–∏–π calculate_age, days_until_birthday, generate_and_send_profile]

# –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ —Å –º–µ–Ω—é
@bot.message_handler(commands=['start'])
def start(message):
    user_id = str(message.from_user.id)
    
    # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    
    if user_id in users:
        buttons = [
            types.KeyboardButton("üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"),
            types.KeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"),
            types.KeyboardButton("üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"),
            types.KeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å"),
            types.KeyboardButton("üíé –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å"),
            types.KeyboardButton("üìã –ü–æ–º–æ—â—å")
        ]
    else:
        buttons = [
            types.KeyboardButton("üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"),
            types.KeyboardButton("üìã –ü–æ–º–æ—â—å")
        ]
    
    markup.add(*buttons)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –º–µ–Ω—é –∫–æ–º–∞–Ω–¥
    bot.set_my_commands([
        types.BotCommand("/start", "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
        types.BotCommand("/profile", "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"),
        types.BotCommand("/edit", "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å"),
        types.BotCommand("/donate", "–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞"),
        types.BotCommand("/help", "–ü–æ–º–æ—â—å")
    ])
    
    bot.send_message(message.chat.id, 
                    "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    reply_markup=markup)

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏)
@bot.message_handler(func=lambda message: message.text in ["üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"])
def registration_start(message):
    user_id = str(message.from_user.id)
    if user_id in users:
        bot.send_message(message.chat.id, "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
        return

    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:", reply_markup=types.ReplyKeyboardRemove())
    bot.register_next_step_handler(msg, process_fio_step)

def process_fio_step(message):
    user_id = str(message.from_user.id)
    users[user_id] = {
        'username': message.from_user.username or "",
        'fio': message.text,
        'avatar': None,
        'birthday': None,
        'notifications': False,
        'agreed': False
    }
    
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (–î–î.–ú–ú.–ì–ì–ì–ì):")
    bot.register_next_step_handler(msg, process_birthday_step)

def process_birthday_step(message):
    user_id = str(message.from_user.id)
    try:
        birthday = datetime.strptime(message.text, "%d.%m.%Y").date()
        users[user_id]['birthday'] = message.text
        users[user_id]['age'] = calculate_age(birthday)
        
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("–î–∞", "–ù–µ—Ç")
        msg = bot.send_message(message.chat.id, "–ü–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –î–†?", reply_markup=markup)
        bot.register_next_step_handler(msg, process_notification_step)
    except ValueError:
        msg = bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")
        bot.register_next_step_handler(msg, process_birthday_step)

def process_notification_step(message):
    user_id = str(message.from_user.id)
    users[user_id]['notifications'] = message.text.lower() == '–¥–∞'
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–°–æ–≥–ª–∞—Å–µ–Ω", "–ù–µ —Å–æ–≥–ª–∞—Å–µ–Ω")
    msg = bot.send_message(message.chat.id, "–°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö:", reply_markup=markup)
    bot.register_next_step_handler(msg, process_agreement_step)

def process_agreement_step(message):
    user_id = str(message.from_user.id)
    users[user_id]['agreed'] = message.text.lower() == '—Å–æ–≥–ª–∞—Å–µ–Ω'
    
    msg = bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ —Ñ–æ—Ç–æ –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞:")
    bot.register_next_step_handler(msg, process_avatar_step)

def process_avatar_step(message):
    user_id = str(message.from_user.id)
    try:
        if message.content_type == 'photo':
            file_id = message.photo[-1].file_id
            file_info = bot.get_file(file_id)
            downloaded_file = bot.download_file(file_info.file_path)
            
            os.makedirs("avatars", exist_ok=True)
            avatar_path = f"avatars/{user_id}.jpg"
            with open(avatar_path, 'wb') as new_file:
                new_file.write(downloaded_file)
            
            users[user_id]['avatar'] = avatar_path
            save_users(users)
            
            bot.send_message(message.chat.id, "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
            start(message)
        else:
            msg = bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ.")
            bot.register_next_step_handler(msg, process_avatar_step)
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: {str(e)}")
        start(message)

# –ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—Ñ–∏–ª—è
@bot.message_handler(commands=['profile'])
@bot.message_handler(func=lambda message: message.text in ["üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"])
def show_profile(message):
    user_id = str(message.from_user.id)
    if user_id not in users:
        bot.send_message(message.chat.id, "–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å.")
        return
    
    generate_and_send_profile(message.chat.id, user_id)

# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
@bot.message_handler(commands=['edit'])
@bot.message_handler(func=lambda message: message.text in ["‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å"])
def edit_profile(message):
    user_id = str(message.from_user.id)
    if user_id not in users:
        bot.send_message(message.chat.id, "–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å.")
        return
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    markup.add(
        "–ò–∑–º–µ–Ω–∏—Ç—å –§–ò–û", 
        "–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è",
        "–ò–∑–º–µ–Ω–∏—Ç—å –∞–≤–∞—Ç–∞—Ä",
        "–ù–∞–∑–∞–¥"
    )
    bot.send_message(message.chat.id, "–ß—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º?", reply_markup=markup)

# [–û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π]

# –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
@bot.message_handler(func=lambda message: message.text in ["‚ùå –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", "–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å"])
def delete_profile(message):
    user_id = str(message.from_user.id)
    if user_id not in users:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–æ—Ñ–∏–ª—è.")
        return
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–î–∞, —É–¥–∞–ª–∏—Ç—å", "–ù–µ—Ç, –æ—Ç–º–µ–Ω–∞")
    bot.send_message(message.chat.id, "–í—ã —É–≤–µ—Ä–µ–Ω—ã? –≠—Ç–æ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!", reply_markup=markup)
    bot.register_next_step_handler(message, confirm_delete)

def confirm_delete(message):
    if message.text == "–î–∞, —É–¥–∞–ª–∏—Ç—å":
        user_id = str(message.from_user.id)
        if users[user_id]['avatar'] and os.path.exists(users[user_id]['avatar']):
            try:
                os.remove(users[user_id]['avatar'])
            except:
                pass
        
        del users[user_id]
        save_users(users)
        bot.send_message(message.chat.id, "–ü—Ä–æ—Ñ–∏–ª—å —É–¥–∞–ª–µ–Ω.", reply_markup=types.ReplyKeyboardRemove())
    start(message)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
@bot.message_handler(func=lambda message: message.text in ["üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"])
def notification_settings(message):
    user_id = str(message.from_user.id)
    if user_id not in users:
        bot.send_message(message.chat.id, "–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å.")
        return
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    if users[user_id]['notifications']:
        markup.add("–û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", "–ù–∞–∑–∞–¥")
    else:
        markup.add("–í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", "–ù–∞–∑–∞–¥")
    
    status = "–≤–∫–ª—é—á–µ–Ω—ã" if users[user_id]['notifications'] else "–æ—Ç–∫–ª—é—á–µ–Ω—ã"
    bot.send_message(message.chat.id, f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {status}", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text in ["–í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", "–û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"])
def toggle_notifications(message):
    user_id = str(message.from_user.id)
    users[user_id]['notifications'] = not users[user_id]['notifications']
    save_users(users)
    
    status = "–≤–∫–ª—é—á–µ–Ω—ã" if users[user_id]['notifications'] else "–æ—Ç–∫–ª—é—á–µ–Ω—ã"
    bot.send_message(message.chat.id, f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ç–µ–ø–µ—Ä—å {status}!")
    start(message)

# –ü–æ–º–æ—â—å –∏ –∫–æ–º–∞–Ω–¥—ã
@bot.message_handler(commands=['help'])
@bot.message_handler(func=lambda message: message.text in ["üìã –ü–æ–º–æ—â—å", "–ü–æ–º–æ—â—å"])
def show_help(message):
    help_text = """
<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/profile - –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å
/edit - –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
/donate - –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
/help - –ü–æ–º–æ—â—å

<b>–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>
- –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è —Å –∫—Ä–∞—Å–∏–≤—ã–º –¥–∏–∑–∞–π–Ω–æ–º
- –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –¥–Ω–µ–π –¥–æ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è
- –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
- –†–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–≤ –¥–ª—è —Ñ–æ–Ω–∞
"""
    bot.send_message(message.chat.id, help_text, parse_mode='HTML')

# –°–∏—Å—Ç–µ–º–∞ –¥–æ–Ω–∞—Ç–∞
@bot.message_handler(commands=['donate'])
@bot.message_handler(func=lambda message: message.text in ["üíé –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å", "–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å"])
def send_donate_menu(message):
    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton("‚≠ê 70 –∑–≤–µ–∑–¥ (1$)", callback_data="donate_70"),
        types.InlineKeyboardButton("üåüüåü 350 –∑–≤–µ–∑–¥ (5$)", callback_data="donate_350"),
        types.InlineKeyboardButton("üåüüåüüåü 700 –∑–≤–µ–∑–¥ (10$)", callback_data="donate_700")
    )
    bot.send_message(
        message.chat.id,
        "–ü–æ–¥–¥–µ—Ä–∂–∏—Ç–µ —Ä–∞–∑–≤–∏—Ç–∏–µ –±–æ—Ç–∞!\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥:",
        reply_markup=markup
    )

@bot.callback_query_handler(func=lambda call: call.data.startswith('donate_'))
def handle_donate(call):
    stars = int(call.data.split('_')[1])
    bot.answer_callback_query(call.id, f"–°–ø–∞—Å–∏–±–æ –∑–∞ {stars} –∑–≤–µ–∑–¥!")
    bot.send_message(
        call.message.chat.id,
        f"–î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ {stars} –∑–≤–µ–∑–¥:\n"
        "1. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É 'üéÅ' —Ä—è–¥–æ–º —Å –ø–æ–ª–µ–º –≤–≤–æ–¥–∞\n"
        "2. –í—ã–±–µ—Ä–∏—Ç–µ '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–≤–µ–∑–¥—ã'\n"
        "3. –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ {stars}\n"
        "4. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥"
    )

# –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
# ... [–∫–æ–¥ —Ñ—É–Ω–∫—Ü–∏–∏ daily_notifications]

if __name__ == '__main__':
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    os.makedirs("avatars", exist_ok=True)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–µ–Ω—é –∫–æ–º–∞–Ω–¥
    bot.set_my_commands([
        types.BotCommand("start", "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
        types.BotCommand("profile", "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"),
        types.BotCommand("edit", "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å"),
        types.BotCommand("donate", "–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞"),
        types.BotCommand("help", "–ü–æ–º–æ—â—å")
    ])
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    threading.Thread(target=daily_notifications, daemon=True).start()
    
    try:
        bot.infinity_polling()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")