import subprocess
import torch
import os
import time
from datetime import datetime
from pathlib import Path
from melo.api import TTS as MeloTTS
from openvoice.api import ToneColorConverter
from llama_index.core import load_index_from_storage, StorageContext
from llama_index.llms.ollama import Ollama
from llama_index.core import Settings

# === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ===
WHISPER_PATH = os.path.expanduser("~/father_ai/whisper.cpp/main")
WHISPER_MODEL = os.path.expanduser("~/father_ai/whisper.cpp/models/ggml-small.bin")
FATHER_EMB = os.path.expanduser("~/father_ai/speaker_embeddings/father.npy")
INDEX_DIR = os.path.expanduser("~/father_ai/father_index")
OUTPUT_WAV = "response.wav"
RECORD_WAV = "query.wav"
LOGS_DIR = os.path.expanduser("~/father_ai/logs")  # –ü–∞–ø–∫–∞ –¥–ª—è –ª–æ–≥–æ–≤

# –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É –¥–ª—è –ª–æ–≥–æ–≤
Path(LOGS_DIR).mkdir(parents=True, exist_ok=True)

# === –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –ª–æ–≥–∏–∫–∏ –¥–∏–∞–ª–æ–≥–∞ ===
last_interaction_time = 0
current_log_file = None

# === –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–µ–π ===
device = "cuda:0" if torch.cuda.is_available() else "cpu"

# OpenVoice –¥–ª—è —Ç–æ–Ω–∞
converter = ToneColorConverter('checkpoints/converter/config.json', device=device)
converter.load_ckpt('checkpoints/converter/checkpoint.pth')
father_emb = torch.load(FATHER_EMB, map_location=device)

# MeloTTS –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ
melo_tts = MeloTTS(language='RU', device=device)

# LLM
llm = Ollama(model="llama3")
Settings.llm = llm

# –ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω–¥–µ–∫—Å–∞
storage_context = StorageContext.from_defaults(persist_dir=INDEX_DIR)
index = load_index_from_storage(storage_context)
chat_engine = index.as_chat_engine(chat_mode="condense_question", verbose=True)

# === –§—É–Ω–∫—Ü–∏–∏ ===

def get_current_log_filename():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã"""
    today = datetime.now().strftime("%Y-%m-%d")
    return os.path.join(LOGS_DIR, f"dialog_{today}.txt")

def ensure_log_file():
    """–°–æ–∑–¥–∞—ë—Ç –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ–∫—É—â–∏–π –ª–æ–≥-—Ñ–∞–π–ª, –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ <24—á —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è"""
    global last_interaction_time, current_log_file

    now = time.time()
    current_file = get_current_log_filename()

    # –ï—Å–ª–∏ –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ –∏–ª–∏ –ø—Ä–æ—à–ª–æ >24—á ‚Äî —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª (–Ω–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±—É–¥–µ—Ç –¥–∏–∞–ª–æ–≥!)
    if current_log_file is None:
        current_log_file = current_file
        last_interaction_time = now
        # –ù–µ —Å–æ–∑–¥–∞—ë–º —Ñ–∞–π–ª —Å—Ä–∞–∑—É ‚Äî —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
        return

    # –ï—Å–ª–∏ —Ñ–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –ø—Ä–æ—à–ª–æ <24—á ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ
    if os.path.exists(current_log_file) and (now - last_interaction_time) < 86400:
        return

    # –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ >24—á ‚Äî –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –Ω–æ–≤—ã–π —Ñ–∞–π–ª (–Ω–æ –Ω–µ —Å–æ–∑–¥–∞—ë–º, –ø–æ–∫–∞ –Ω–µ –±—É–¥–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è)
    current_log_file = current_file
    last_interaction_time = now

def log_message(speaker, message):
    """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–µ–∫—É—â–∏–π –ª–æ–≥-—Ñ–∞–π–ª —Å –∫—Ä–∞—Å–∏–≤—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    global current_log_file

    if current_log_file is None:
        ensure_log_file()

    timestamp = datetime.now().strftime("%H:%M:%S")
    log_entry = f"[{timestamp}] {speaker}: {message}\n"

    # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ‚Äî —Å–æ–∑–¥–∞—ë–º —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
    if not os.path.exists(current_log_file):
        with open(current_log_file, 'w', encoding='utf-8') as f:
            date_str = datetime.now().strftime("%d %B %Y")
            f.write(f"üìÖ –î–∏–∞–ª–æ–≥ —Å —Ü–∏—Ñ—Ä–æ–≤—ã–º –¥–≤–æ–π–Ω–∏–∫–æ–º –æ—Ç—Ü–∞\n")
            f.write(f"üóìÔ∏è –î–∞—Ç–∞: {date_str}\n")
            f.write("="*60 + "\n\n")

    # –î–æ–ø–∏—Å—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    with open(current_log_file, 'a', encoding='utf-8') as f:
        f.write(log_entry)

    print(f"üíæ –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ {os.path.basename(current_log_file)}")

def record_audio(duration=5):
    print("üéôÔ∏è –ì–æ–≤–æ—Ä–∏—Ç–µ...")
    subprocess.run(["arecord", "-f", "S16_LE", "-r", "16000", "-c", "1", "-d", str(duration), RECORD_WAV])

def speech_to_text():
    result = subprocess.run([WHISPER_PATH, "-m", WHISPER_MODEL, "-f", RECORD_WAV, "-l", "ru"], capture_output=True, text=True)
    return result.stdout.strip()

def generate_response(text):
    response = chat_engine.chat(text)
    return response.response

def text_to_speech(text, output_path):
    tmp_path = "tmp_base.wav"
    melo_tts.tts_to_file(text, melo_tts.hps.data.spk2id['[RU]'], tmp_path)
    converter.convert(
        audio_src_path=tmp_path,
        src_se=None,
        tgt_se=father_emb,
        output_path=output_path
    )

def play_audio(file_path):
    subprocess.run(["aplay", file_path])

# === –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª ===
if __name__ == "__main__":
    print("üéôÔ∏è –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞. –°–∫–∞–∂–∏—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å...")
    while True:
        record_audio()
        text = speech_to_text()
        print(f"–í—ã —Å–∫–∞–∑–∞–ª–∏: {text}")

        if "–≤—ã—Ö–æ–¥" in text.lower() or "–ø–æ–∫–∞" in text.lower():
            goodbye = "–î–æ —Å–≤–∏–¥–∞–Ω–∏—è, —Å—ã–Ω. –ë–µ—Ä–µ–≥–∏ —Å–µ–±—è."
            print(f"–û—Ç–µ—Ü: {goodbye}")
            text_to_speech(goodbye, OUTPUT_WAV)
            play_audio(OUTPUT_WAV)
            log_message("–û—Ç–µ—Ü", goodbye)
            break

        # –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–æ–≥-—Ñ–∞–π–ª
        ensure_log_file()

        # –õ–æ–≥–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å
        log_message("–ù–∏–∫–∏—Ç–∞", text)

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ –ª–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response = generate_response(text)
        print(f"–û—Ç–µ—Ü –æ—Ç–≤–µ—á–∞–µ—Ç: {response}")
        log_message("–û—Ç–µ—Ü", response)

        # –û–∑–≤—É—á–∫–∞
        text_to_speech(response, OUTPUT_WAV)
        play_audio(OUTPUT_WAV)

        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
        last_interaction_time = time.time()
