import os
import json
import random
import math
from datetime import datetime, date, timedelta
from PIL import Image, ImageDraw, ImageFont, ImageOps
from io import BytesIO
import telebot
from telebot import types
import threading
import time

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
TOKEN = '–í–ê–®_–¢–ï–õ–ï–ì–†–ê–ú_–¢–û–ö–ï–ù'
bot = telebot.TeleBot(TOKEN)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
USERS_FILE = 'users.json'
IMAGE_SIZE = (1980, 1080)
AVATAR_SIZE = 400  # –†–∞–∑–º–µ—Ä –∫—Ä—É–≥–ª–æ–π –∞–≤–∞—Ç–∞—Ä–∫–∏
BASE_FONT_RATIO = 0.15  # 15% –æ—Ç –≤—ã—Å–æ—Ç—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def load_users():
    if not os.path.exists(USERS_FILE):
        return {}
    try:
        with open(USERS_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    except:
        return {}

def save_users(users):
    with open(USERS_FILE, 'w', encoding='utf-8') as f:
        json.dump(users, f, ensure_ascii=False, indent=4)

users = load_users()

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω–æ–≥–æ —Ñ–æ–Ω–∞
def generate_gradient_background(size, num_colors=3):
    """–°–æ–∑–¥–∞–µ—Ç –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π –≥—Ä–∞–¥–∏–µ–Ω—Ç —Å —Ç–µ–º–Ω—ã–º–∏ —Ü–≤–µ—Ç–∞–º–∏"""
    colors = []
    for _ in range(num_colors):
        colors.append((random.randint(0, 150), random.randint(0, 150), random.randint(0, 150)))
    
    img = Image.new('RGB', size)
    draw = ImageDraw.Draw(img)
    
    for i in range(size[1]):
        pos = i / size[1]
        color_idx = pos * (len(colors) - 1)
        idx1 = int(math.floor(color_idx))
        idx2 = min(idx1 + 1, len(colors) - 1)
        factor = color_idx - idx1
        
        r = int(colors[idx1][0] + (colors[idx2][0] - colors[idx1][0]) * factor)
        g = int(colors[idx1][1] + (colors[idx2][1] - colors[idx1][1]) * factor)
        b = int(colors[idx1][2] + (colors[idx2][2] - colors[idx1][2]) * factor)
        
        draw.line([(0, i), (size[0], i)], fill=(r, g, b))
    
    return img, colors

# –°–æ–∑–¥–∞–Ω–∏–µ –∫—Ä—É–≥–ª–æ–π –∞–≤–∞—Ç–∞—Ä–∫–∏
def make_circular_avatar(image_path):
    img = Image.open(image_path).resize((AVATAR_SIZE, AVATAR_SIZE))
    mask = Image.new('L', (AVATAR_SIZE, AVATAR_SIZE), 0)
    ImageDraw.Draw(mask).ellipse((0, 0, AVATAR_SIZE, AVATAR_SIZE), fill=255)
    output = ImageOps.fit(img, mask.size, centering=(0.5, 0.5))
    output.putalpha(mask)
    return output

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
def generate_profile_image(user):
    # –°–æ–∑–¥–∞–µ–º —Ñ–æ–Ω
    img, colors = generate_gradient_background(IMAGE_SIZE, random.randint(3, 5))
    draw = ImageDraw.Draw(img)
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —à—Ä–∏—Ñ—Ç—ã
    base_font_size = int(IMAGE_SIZE[1] * BASE_FONT_RATIO)
    try:
        font_large = ImageFont.truetype("arial.ttf", int(base_font_size * 0.7))
        font_medium = ImageFont.truetype("arial.ttf", int(base_font_size * 0.5))
        font_small = ImageFont.truetype("arial.ttf", int(base_font_size * 0.3))
    except:
        font_large = ImageFont.load_default(size=int(base_font_size * 0.7))
        font_medium = ImageFont.load_default(size=int(base_font_size * 0.5))
        font_small = ImageFont.load_default(size=int(base_font_size * 0.3))

    # –î–æ–±–∞–≤–ª—è–µ–º –∞–≤–∞—Ç–∞—Ä
    if user['avatar'] and os.path.exists(user['avatar']):
        avatar = make_circular_avatar(user['avatar'])
        img.paste(avatar, ((IMAGE_SIZE[0] - AVATAR_SIZE) // 2, int(IMAGE_SIZE[1] * 0.05)), avatar)

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
    def draw_centered_text(y, text, font, fill=(255, 255, 255)):
        bbox = draw.textbbox((0, 0), text, font=font)
        w, h = bbox[2] - bbox[0], bbox[3] - bbox[1]
        draw.text(((IMAGE_SIZE[0] - w) // 2, y), text, font=font, fill=fill)
        return y + h

    # –†–∏—Å—É–µ–º —Ç–µ–∫—Å—Ç
    y_pos = int(IMAGE_SIZE[1] * 0.05) + AVATAR_SIZE + int(IMAGE_SIZE[1] * 0.05)
    
    username = f"@{user['username']}" if user['username'] else "–ë–µ–∑ —é–∑–µ—Ä–Ω–µ–π–º–∞"
    y_pos = draw_centered_text(y_pos, username, font_large) + int(IMAGE_SIZE[1] * 0.03)
    y_pos = draw_centered_text(y_pos, user['fio'], font_medium) + int(IMAGE_SIZE[1] * 0.02)
    y_pos = draw_centered_text(y_pos, f"–í–æ–∑—Ä–∞—Å—Ç: {user['age']}", font_medium) + int(IMAGE_SIZE[1] * 0.02)
    
    birthday = datetime.strptime(user['birthday'], "%d.%m.%Y").date()
    days_left = days_until_birthday(birthday)
    days_text = "–° –î–ù–ï–ú –†–û–ñ–î–ï–ù–ò–Ø!" if days_left == 0 else f"–î–æ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è: {days_left} –¥–Ω–µ–π"
    y_pos = draw_centered_text(y_pos, days_text, font_medium)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–ª–∏—Ç—Ä—É —Ü–≤–µ—Ç–æ–≤
    palette = " | ".join([f"#{r:02x}{g:02x}{b:02x}" for r, g, b in colors])
    draw_centered_text(IMAGE_SIZE[1] - int(base_font_size * 0.4), f"–¶–≤–µ—Ç–∞ —Ñ–æ–Ω–∞: {palette}", font_small)
    
    return img

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def calculate_age(birthday):
    today = date.today()
    return today.year - birthday.year - ((today.month, today.day) < (birthday.month, birthday.day))

def days_until_birthday(birthday):
    today = date.today()
    next_bday = date(today.year, birthday.month, birthday.day)
    if next_bday < today:
        next_bday = date(today.year + 1, birthday.month, birthday.day)
    return (next_bday - today).days

# –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
@bot.message_handler(commands=['start'])
def start(message):
    user_id = str(message.from_user.id)
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    
    if user_id in users:
        buttons = ["–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", "–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å"]
        markup.add(*buttons)
        bot.send_message(message.chat.id, "–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=markup)
    else:
        markup.add("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
        bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É—á–µ—Ç–∞ –¥–Ω–µ–π –¥–æ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è.", reply_markup=markup)

# –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
@bot.message_handler(func=lambda message: message.text == "–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å")
def delete_profile(message):
    user_id = str(message.from_user.id)
    if user_id not in users:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–î–∞, —É–¥–∞–ª–∏—Ç—å", "–ù–µ—Ç, –æ—Ç–º–µ–Ω–∞")
    bot.send_message(message.chat.id, "–í—ã —É–≤–µ—Ä–µ–Ω—ã? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!", reply_markup=markup)
    bot.register_next_step_handler(message, process_delete_confirmation)

def process_delete_confirmation(message):
    user_id = str(message.from_user.id)
    if message.text == "–î–∞, —É–¥–∞–ª–∏—Ç—å":
        if users[user_id]['avatar'] and os.path.exists(users[user_id]['avatar']):
            try:
                os.remove(users[user_id]['avatar'])
            except:
                pass
        
        del users[user_id]
        save_users(users)
        bot.send_message(message.chat.id, "–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —É–¥–∞–ª–µ–Ω.", reply_markup=types.ReplyKeyboardRemove())
    else:
        start(message)

# –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
def daily_notifications():
    while True:
        now = datetime.now()
        if now.hour == 0 and now.minute < 1:  # –ü–µ—Ä–≤–∞—è –º–∏–Ω—É—Ç–∞ –ø–æ—Å–ª–µ –ø–æ–ª—É–Ω–æ—á–∏
            today = date.today()
            for user_id, user in users.items():
                if user.get('notifications', False):
                    try:
                        birthday = datetime.strptime(user['birthday'], "%d.%m.%Y").date()
                        days = days_until_birthday(birthday)
                        
                        if days == 0:
                            msg = f"üéâ {user['fio']}, —Å –î–Ω–µ–º –†–æ–∂–¥–µ–Ω–∏—è! üéâ"
                        else:
                            msg = f"{user['fio']}, –¥–æ –≤–∞—à–µ–≥–æ –î–† –æ—Å—Ç–∞–ª–æ—Å—å {days} –¥–Ω–µ–π"
                        
                        bot.send_message(int(user_id), msg)
                        generate_and_send_profile(int(user_id), user_id)
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è {user_id}: {e}")
            time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑ –≤ –º–∏–Ω—É—Ç—É
        else:
            time.sleep(30)

if __name__ == '__main__':
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    threading.Thread(target=daily_notifications, daemon=True).start()
    bot.infinity_polling()